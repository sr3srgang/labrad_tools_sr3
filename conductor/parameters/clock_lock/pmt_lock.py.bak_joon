import json
import os
import time
from data_analysis.cavity_clock.read_data import *
from data_analysis.cavity_clock.helpers import *
from twisted.internet import reactor
from conductor.parameter import ConductorParameter
from data_analysis.PID import PID

# the value of this parameter (PmtLock.vallue) should be a dict with PID p 

class PmtLock(ConductorParameter):
    autostart = False
    priority = 10
    data_directory = os.path.join(os.getenv('PROJECT_DATA_PATH'), 'data')
    #data_filename = '{}.conductor.json'
    call_in_thread = False
    default = 885387.35 + 116.55e6
    default_value = {"k_prop": -1, "t_int": 20, "t_diff": 0, "setpoint":.5,  "dt": 1, "clock_sg380_feedback": 0}
    
    def initialize(self, config):
        if isinstance(self.value, dict) is not True:
            # msg = f"Warning: the value for clock_lock.PmtLock is not (properly) given: {self.value}"
            # msg = f"\nUsing default values: {self.default_value}"
            msg  = "Warning from pmt_lock"
            print(msg)
            self.value = self.default_value
            
        super(PmtLock, self).initialize(config)
        self.connect_to_labrad()

        print('Running a pmt clock lock')
        
    def update(self):
        print('Lock update at {}'.format(time.time()))
        #Data file to use:
        df = self.server.parameters.get('pico.clock_recorder').get_last_value() #want to find the data file from last shot during this blue mot loading
        if df is not None:
             path = os.path.join(self.data_directory, df+'.hdf5')
             print("Clock lock looking for file {}".format(path))
             gnd, exc, background, ts = get_pmt_data(path)
             pico_shot_range = np.arange(1, 150)
             gnd_tot = np.sum((gnd - background)[pico_shot_range])
             exc_tot = np.sum((exc - background)[pico_shot_range])
            
             print(gnd_tot, exc_tot)
             atom_num = gnd_tot + exc_tot
             exc_frac = float(exc_tot)/(exc_tot + gnd_tot)
             err_sig = exc_frac
             print(exc_frac)
             
             out = self.PID.update(err_sig)
             print("new value: {}".format(out))
             
            #  self.server.parameters.get('clock_sg380').set_value_lock(out)
            #self.server.parameters.get('clock_pulse_sg380').set_value_lock(out)
            self.server.parameters.get('clock_sg380').apply_correction(out)
            self.server.parameters.get('clock_sg380').apply_correction(out)


        #read data and get excitation fraction
        
        
        
        
        
    
Parameter = PmtLock
